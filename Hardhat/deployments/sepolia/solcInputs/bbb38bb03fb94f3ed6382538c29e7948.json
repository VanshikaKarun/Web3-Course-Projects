{
  "language": "Solidity",
  "sources": {
    "contracts/Fundme.sol": {
      "content": "// SPDX-License-Identifier: SEE LICENSE IN LICENSE\r\npragma solidity ^0.8.0;\r\n\r\ncontract Fundme{\r\n    address public owner;\r\n    mapping(address=>uint256) public atf;\r\n    constructor(){\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function fund() public payable{\r\n        require(msg.value>0, \"You neeed to send some ETH\");\r\n        atf[msg.sender] = atf[msg.sender]+msg.value;\r\n    }\r\n\r\n    function withdraw() public{\r\n        require(msg.sender==owner, \"Only owner can withdraw\");\r\n        (bool success,) = payable(owner).call{value:address(this).balance}(\"\");\r\n        require(success, \"withdraw failed\");\r\n    }\r\n\r\n    function getBalance() public view returns(uint256){\r\n        return address(this).balance;\r\n    }\r\n\r\n    function getFunderContribution(address funder) public view returns(uint256){\r\n        return atf[funder];\r\n    }\r\n}"
    },
    "contracts/Lock.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.28;\n\n// Uncomment this line to use console.log\n// import \"hardhat/console.sol\";\n\ncontract Lock {\n    uint public unlockTime;\n    address payable public owner;\n\n    event Withdrawal(uint amount, uint when);\n\n    constructor(uint _unlockTime) payable {\n        require(\n            block.timestamp < _unlockTime,\n            \"Unlock time should be in the future\"\n        );\n\n        unlockTime = _unlockTime;\n        owner = payable(msg.sender);\n    }\n\n    function withdraw() public {\n        // Uncomment this line, and the import of \"hardhat/console.sol\", to print a log in your terminal\n        // console.log(\"Unlock time is %o and block timestamp is %o\", unlockTime, block.timestamp);\n\n        require(block.timestamp >= unlockTime, \"You can't withdraw yet\");\n        require(msg.sender == owner, \"You aren't the owner\");\n\n        emit Withdrawal(address(this).balance, block.timestamp);\n\n        owner.transfer(address(this).balance);\n    }\n}\n"
    },
    "contracts/SimpleStorage.sol": {
      "content": "// SPDX-License-Identifier: SEE LICENSE IN LICENSE\r\npragma solidity ^0.8.0;\r\n\r\ncontract SimpleStorage {\r\n    int public num;\r\n\r\n    function store(int _num) public {\r\n        num = _num;\r\n    }\r\n\r\n    function retrieve() public view returns(int){\r\n        return num;\r\n    }\r\n}"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}